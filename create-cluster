echo "setting Azure subscription to $SUBSCRIPTION_ID"
az account set --subscription="${SUBSCRIPTION_ID}"

echo "creating resource group $RG_NAME in $DC_LOCATION"
az group create --name "${RG_NAME}" --location "${DC_LOCATION}"

echo "creating azure container service named $SERVICE_NAME"
az acs create --resource-group="${RG_NAME}" --location="${DC_LOCATION}" \
  --orchestrator-type=kubernetes --master-count=1 --agent-count=3 \
  --agent-vm-size="Standard_DS2" \
  --admin-username="ops" \
  --name="${SERVICE_NAME}" \
  --dns-prefix="${DEPLOYMENT_PREFIX}" \
  --ssh-key-value "${SSH_KEY_LOCATION}/${SSH_KEY_NAME}.pub"

sleep 10

echo "getting kubernetes credentials from azure container service cluster"
#TODO: Need to figure out why I'm unable to get the service principle.
# as a workaround I had to scp the kubeconfig file from the remote cluster host.
#az acs kubernetes get-credentials --resource-group=$RG_NAME --name=$SERVICE_NAME  --ssh-key-file="${SSH_KEY_LOCATION}/${SSH_KEY_NAME}"

sleep 10

kubectl cluster-info

echo "creating deis storage account"
az storage account create -n $DEIS_STORAGE_ACCOUNT_NAME -l $DC_LOCATION -g $RG_NAME --sku Standard_LRS
export DEIS_STORAGE_ACCOUNT_KEY=`az storage account keys list -n $DEIS_STORAGE_ACCOUNT_NAME -g $RG_NAME --query [0].value --output tsv`

echo "creating kubernetes persistent volume storage account"
az storage account create -n $PV_STORAGE_ACCOUNT_NAME -l $DC_LOCATION -g $RG_NAME --sku Premium_LRS
export PV_STORAGE_ACCOUNT_KEY=`az storage account keys list -n $PV_STORAGE_ACCOUNT_NAME -g $RG_NAME --query [0].value --output tsv`

echo "creating vhds container in persistent volume storage account"
az storage container create --name vhds --account-key=$PV_STORAGE_ACCOUNT_KEY --account-name=$PV_STORAGE_ACCOUNT_NAME

echo "creating persistent volume storage class"
kubectl create -f azure-disk.yaml

echo "Setup the Nginx load balancer"
kubectl run nginx --image nginx
kubectl expose deployments nginx --port=80 --type=LoadBalancer

echo "initializing helm"
helm init

sleep 10

echo "starting deis installation using helm"
helm repo add deis https://charts.deis.com/workflow
helm install deis/workflow --name deis --namespace=deis --set global.storage=azure,azure.accountname=$DEIS_STORAGE_ACCOUNT_NAME,azure.accountkey=$DEIS_STORAGE_ACCOUNT_KEY,azure.registry_container=registry,azure.database_container=database,azure.builder_container=builder

helm install --name azurek8spark stable/spark
export SPARK_SERVICE_IP=$(kubectl get svc --namespace default azurek8spark-webui -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
export ZEPPELIN_SERVICE_IP=$(kubectl get svc --namespace default azurek8spark-zeppelin -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

kubectl get svc --namespace default -w azurek8spark-webui
kubectl get svc --namespace default -w azurek8spark-zeppelin

watch kubectl get pods --all-namespaces -o wide

sleep 10

echo "Zeppelin Host http://${ZEPPELIN_SERVICE_IP}:8080"
echo "Spark Cluster available at http://${SPARK_SERVICE_IP}:8080"